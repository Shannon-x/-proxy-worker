import { getAssetFromKV } from '@cloudflare/kv-asset-handler';

// 一个简单的静态资源处理函数，在KV绑定失败时使用
async function serveStaticAsset(request, env) {
  const url = new URL(request.url);
  let path = url.pathname;
  
  // 默认到index.html
  if (path === '/' || path === '') {
    path = '/index.html';
  }
  
  // 静态资源映射
  const contentTypeMap = {
    '.html': 'text/html',
    '.css': 'text/css',
    '.js': 'application/javascript',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.ico': 'image/x-icon',
    '.svg': 'image/svg+xml',
  };
  
  // 获取扩展名对应的Content-Type
  const ext = path.includes('.') ? path.substring(path.lastIndexOf('.')) : '';
  const contentType = contentTypeMap[ext] || 'text/plain';
  
  try {
    // 尝试获取静态资源
    // 首先尝试从KV中获取
    if (env.__STATIC_CONTENT) {
      try {
        const asset = await getAssetFromKV(
          { request, env: { __STATIC_CONTENT: env.__STATIC_CONTENT } },
          { mapRequestToAsset: req => new Request(new URL(path, req.url), req) }
        );
        return asset;
      } catch (e) {
        console.error('从KV获取静态资源失败:', e);
        // 继续尝试下一种方法
      }
    }
    
    // 如果是常见请求，返回预定义的响应
    if (path === '/index.html' || path === '/') {
      // index.html内容
      const html = `<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>有效代理列表</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="/static/js/main.js" defer></script>
</head>
<body>
<div class="container mt-5">
    <h1 class="mb-4">有效代理列表</h1>
    <!-- 筛选和导出控件 -->
    <div class="row mb-3">
      <div class="col">
        <input type="text" id="search-input" placeholder="搜索 IP 或 地区" class="form-control" />
      </div>
      <div class="col">
        <select id="filter-region" class="form-select">
          <option value="">全部地区</option>
        </select>
      </div>
      <div class="col">
        <select id="filter-type" class="form-select">
          <option value="">全部类型</option>
        </select>
      </div>
      <div class="col-auto">
        <button id="export-btn" class="btn btn-primary">导出CSV</button>
      </div>
    </div>
    <table class="table table-striped" id="proxy-table">
        <thead>
            <tr>
                <th>IP</th>
                <th>端口</th>
                <th>类型</th>
                <th>HTTPS</th>
                <th>地区</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <!-- 分页控件 -->
    <nav>
        <ul class="pagination justify-content-center" id="pagination"></ul>
    </nav>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        loadProxies();
        setInterval(loadProxies, 60000); // 每60秒刷新一次
    });
</script>
</body>
</html>`;
      return new Response(html, {
        headers: {
          'Content-Type': 'text/html; charset=utf-8',
          'Cache-Control': 'no-cache'
        }
      });
    }
    
    if (path === '/static/js/main.js') {
      // 使用实际的main.js内容
      // 这只是一个备选措施，在正常部署时应该不会用到这段代码
      return fetch('https://cdn.jsdelivr.net/gh/your-username/proxy-worker/worker/public/static/js/main.js')
        .then(resp => new Response(resp.body, {
          headers: { 'Content-Type': 'application/javascript' }
        }))
        .catch(() => {
          // 如果远程获取失败，返回一个简化版的代码
          const js = `let proxies = [];
let filtered = [];
let currentPage = 1;
const pageSize = 20;

async function loadProxies() {
    try {
        const response = await fetch('/proxies.json');
        const data = await response.json();
        if (data.error) {
            alert('加载代理失败: ' + (data.message || data.error));
            return;
        }
        
        proxies = Array.isArray(data) ? data : [];
        filtered = proxies;
        renderTable();
    } catch (err) {
        console.error('加载代理失败:', err);
    }
}

function renderTable() {
    const tbody = document.querySelector('#proxy-table tbody');
    tbody.innerHTML = '';
    const start = (currentPage - 1) * pageSize;
    const pageData = filtered.slice(start, start + pageSize);
    
    if (pageData.length === 0) {
        tbody.innerHTML = '<tr><td colspan="5" class="text-center">暂无数据</td></tr>';
        return;
    }
    
    pageData.forEach(p => {
        const tr = document.createElement('tr');
        tr.innerHTML = \`
            <td>\${p.ip}</td>
            <td>\${p.port}</td>
            <td>\${p.type || '-'}</td>
            <td>\${p.https || '-'}</td>
            <td>\${p.region || '-'}</td>
        \`;
        tbody.appendChild(tr);
    });
}

// 初始加载
document.addEventListener('DOMContentLoaded', () => {
    loadProxies();
    setInterval(loadProxies, 60000);
});`;
          return new Response(js, {
            headers: { 'Content-Type': 'application/javascript' }
          });
        });
    }
    
    // 对于其他文件，返回404
    return new Response('Not Found', { status: 404 });
  } catch (e) {
    return new Response(`Static asset error: ${e.message}`, { status: 500 });
  }
}

export default {
  async fetch(request, env, ctx) {
    try {
      const url = new URL(request.url);
      
      // 处理favicon.ico请求
      if (url.pathname === '/favicon.ico') {
        return new Response(null, { status: 204 });
      }
      
      // JSON 数据接口
      if (url.pathname === '/proxies.json') {
        try {
          // 确保 proxyworker KV 命名空间存在并正确绑定
          if (!env.proxyworker) {
            console.error('proxyworker KV 命名空间未绑定!');
            return new Response(JSON.stringify({ error: 'KV存储未配置', message: '系统暂时无法提供代理数据' }), {
              status: 503,
              headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache',
                'Access-Control-Allow-Origin': '*'
              }
            });
          }
          
          const data = await env.proxyworker.get('list');
          return new Response(data || '[]', {
            headers: { 
              'Content-Type': 'application/json',
              'Cache-Control': 'no-cache, no-store, must-revalidate',
              'Access-Control-Allow-Origin': '*'
            }
          });
        } catch (err) {
          console.error('获取代理数据出错:', err);
          return new Response(JSON.stringify({ error: err.message }), {
            status: 500,
            headers: { 
              'Content-Type': 'application/json',
              'Access-Control-Allow-Origin': '*'
            }
          });
        }
      }
      
      // 尝试使用getAssetFromKV获取资源，如果失败就使用备用方法
      try {
        return await getAssetFromKV(
          {
            request,
            waitUntil: ctx.waitUntil.bind(ctx),
            env
          },
          {
            mapRequestToAsset: (req) => {
              const parsedUrl = new URL(req.url);
              // 根路径映射到index.html
              if (parsedUrl.pathname === '/') {
                parsedUrl.pathname = '/index.html';
              }
              return new Request(parsedUrl.toString(), req);
            },
            cacheControl: {
              bypassCache: true
            }
          }
        );
      } catch (e) {
        console.log('getAssetFromKV 失败, 尝试备用方法:', e);
        return await serveStaticAsset(request, env);
      }
        {
          mapRequestToAsset: (req) => {
            const parsedUrl = new URL(req.url);
            // 根路径映射到index.html
            if (parsedUrl.pathname === '/') {
              parsedUrl.pathname = '/index.html';
            }
            return new Request(parsedUrl.toString(), req);
          },
          cacheControl: {
            bypassCache: true
          }
        }
      );
    } catch (e) {
      console.error('Worker错误:', e);
      return new Response(`服务错误: ${e.message}`, { 
        status: 500,
        headers: { 'Content-Type': 'text/plain; charset=utf-8' }
      });
    }
  },

  async scheduled(event, env, ctx) {
    console.log('开始执行定时任务：获取代理列表');
    ctx.waitUntil(fetchAndStore(env));
  }
};

// 从 Proxyscrape 拉取 HTTP、SOCKS4、SOCKS5 代理列表并存入 KV
async function fetchAndStore(env) {
  try {
    // 首先检查 KV 绑定是否存在
    if (!env.proxyworker) {
      console.error('无法执行定时任务：proxyworker KV 命名空间未绑定!');
      return;
    }
    
    const protocols = [
      { protocol: 'http', type: 'HTTP' },
      { protocol: 'socks4', type: 'SOCKS4' },
      { protocol: 'socks5', type: 'SOCKS5' },
    ];
    let list = [];
    
    // 尝试获取现有代理列表
    let existingProxies = [];
    try {
      const existingData = await env.proxyworker.get('list');
      if (existingData) {
        existingProxies = JSON.parse(existingData);
      }
    } catch (e) {
      console.error('读取现有代理失败:', e);
    }
    
    for (const p of protocols) {
      try {
        const res = await fetch(
          `https://api.proxyscrape.com/v2/?request=getproxies&protocol=${p.protocol}&timeout=10000&country=all&ssl=all&anonymity=all`
        );
        if (!res.ok) {
          console.error(`获取${p.type}代理失败: ${res.status}`);
          continue;
        }
        
        const text = await res.text();
        const arr = text.split('\n')
          .filter(line => line.includes(':'))
          .map(line => {
            const [ip, port] = line.trim().split(':');
            return { 
              ip, 
              port, 
              type: p.type, 
              https: '待检测', 
              region: '',
              last_check: new Date().toISOString()
            };
          });
        
        list = list.concat(arr);
      } catch (e) {
        console.error(`获取${p.type}代理时出错:`, e);
      }
    }
    
    // 如果新获取的列表为空，但存在旧数据，保留旧数据
    if (list.length === 0 && existingProxies.length > 0) {
      console.log('新获取的代理列表为空，保留现有数据');
      return;
    }
    
    // 将代理IP列表存入KV
    await env.proxyworker.put('list', JSON.stringify(list));
    console.log(`成功更新代理列表，共${list.length}个代理`);
  } catch (err) {
    console.error('获取代理列表失败:', err);
  }
}